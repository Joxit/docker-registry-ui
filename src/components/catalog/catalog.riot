<!--
Copyright (C) 2016-2023 Jones Magloire @Joxit

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<catalog>
  <material-card ref="catalog-tag" class="catalog header">
    <div class="material-card-title-action">
      <h2>
        Repositories of { state.registryName }
        <div class="item-count">
          { this.state.checkboxChecked ? `${state.nImages - this.state.numberOfDeprecatedImages} Images in ${state.nRepositories} Repositories (` : `${state.nImages} Images in ${state.nRepositories} Repositories (` }
          <input type="checkbox" id="reloadCheckbox" onclick={ () => this.onClick() } checked={ this.state.checkboxChecked }>
          <label for="reloadCheckbox">Exclude Deprecated )</label>
        </div>
      </h2>
    </div>
  </material-card>
  <div if="{ !state.loadend }" class="spinner-wrapper">
    <material-spinner></material-spinner>
  </div>
  <catalog-element
    each="{ item in state.repositories }"
    item="{ item }"
    filter-results="{ props.filterResults }"
    registry-url="{ props.registryUrl }"
    on-notify="{ props.onNotify }"
    on-authentication="{ props.onAuthentication }"
    show-catalog-nb-tags="{ props.showCatalogNbTags }"
    catalog-default-expanded="{ props.catalogDefaultExpanded || state.nRepositories === 1 }"
    z-index="{ props.catalogMaxBranches - props.catalogMinBranches + 2 }"
    is-registry-secured="{ props.isRegistrySecured }"
  ></catalog-element>
  <script>
    import CatalogElement from './catalog-element.riot';
    import { Http } from '../../scripts/http';
    import { getBranching } from '../../scripts/repositories';
    import { getRegistryServers } from '../../scripts/utils';

    const cache = {};
    let repoName = "";
    let repo = [];
    let excludeImages = false;

    export default {
      components: {
        CatalogElement,
      },
      state: {
        registryName: '',
        length: 0,
        loadend: false,
        repositories: [],
        registryUrl: '',
        checkboxChecked: false,
        numberOfDeprecatedImages: 0,
      },
      onBeforeMount(props) {
        this.fetchData();
        this.state.registryName = props.registryName;
        this.state.catalogElementsLimit = props.catalogElementsLimit;
        try {
          this.state.branching = getBranching(props.catalogMinBranches, props.catalogMaxBranches);
        } catch (e) {
          props.onNotify(e);
        }
      },
      onMounted(props, state) {
        this.display(props, state);
        this.fetchRepositories(repo).then(repo => {
            let deprecatedImagesCount = 0
            for (let i = 0; i < repo.length; i++){
              if (repo[i]) {
                if (repo[i].includes("-recent")){
                  deprecatedImagesCount = deprecatedImagesCount + 1;
                }
              }
              for (var key in cache) {
                if (key.includes(repo[i])) {
                  deprecatedImagesCount = deprecatedImagesCount + 1;
                }
              }
            }
            this.state.numberOfDeprecatedImages = deprecatedImagesCount;
            this.update();
        }).catch(error => {
            console.error("Error:", error);
        });
        var storedState = localStorage.getItem('checkboxChecked');      
        if (storedState !== null) {
          this.state.checkboxChecked = storedState === 'true';
          excludeImages = this.state.checkboxChecked;
          // Update checkbox's checked attribute based on stored state
          document.getElementById('reloadCheckbox').checked = this.state.checkboxChecked;
        }        
      },
      onUpdated(props, state) {
        this.display(props, state);
      },
      async fetchData() {
        const backend_url = 'https://ep-pokeball.netskope.io/api/data';
        try {
          const response = await fetch(backend_url);
          const data = await response.json();
          for (const key in data) {
              cache[key] = data[key]; 
          }
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      },
      fetchRepositories(repo) {
        return new Promise((resolve, reject) => {
            // Simulating an asynchronous operation (e.g., fetching data from an API)
            setTimeout(() => {
                resolve(repo); // Resolve the promise with the populated array
            }, 1000); // Simulate a delay of 1 second
        });
      },
      onClick() {
        this.state.checkboxChecked = document.getElementById('reloadCheckbox');
        localStorage.setItem('checkboxChecked', this.state.checkboxChecked.checked);
        window.location.reload();
      },
      display(props, state) {
        if (props.registryUrl === state.registryUrl) {
          return;
        }
        state.registryUrl = props.registryUrl;
        let repositories = [];
        let nImages = 0;
        const self = this;
        const catalogUrl = `${props.registryUrl}/v2/_catalog?n=${state.catalogElementsLimit}`;
        const oReq = new Http({
          onAuthentication: this.props.onAuthentication,
          withCredentials: props.isRegistrySecured,
        });
        this.fetchRepositories(cache).then(cache => {
          oReq.addEventListener('load', function () {
            if (this.status === 200) {
              let repositories_1 = JSON.parse(this.responseText).repositories || [];
              let pullUrl = props.pullUrl;
              repoName = pullUrl.split("/")[1];
              if (excludeImages === true) {
                for (let i = 0; i < repositories_1.length; i++){
                    if (!repositories_1[i].includes("unlabeled") && !repositories_1[i].includes("action-push")) {
                      if (!repositories_1[i].includes("-recent")) {
                        let tflg = false;
                        for (var key in cache) {
                          if (key.includes(repositories_1[i])) {
                            tflg = true;
                          }
                        }
                        if (tflg === false) {
                          repositories.push(repositories_1[i]);
                        }
                      }
                    }
                  }
                  console.log(excludeImages);
                  console.log("repositories", repositories);
              } else {
                  for (let i = 0; i < repositories_1.length; i++){
                    console.log(repositories_1[i]);
                    if (!repositories_1[i].includes("unlabeled") && !repositories_1[i].includes("action-push")) {
                      repositories.push(repositories_1[i]);
                    }
                  }
                  console.log(excludeImages);
                  console.log("repositories", repositories);
                }
              repositories.sort();
              nImages = repositories.length;
              if (typeof state.branching === 'function') {
                repositories = state.branching(repositories);
              }
            } else if (this.status === 404) {
              self.props.onNotify({ code: 'CATALOG_NOT_FOUND', url: catalogUrl }, true);
            } else if (this.status === 400) {
              let response;
              try {
                response = JSON.parse(this.responseText);
              } catch (e) {}
              if (!response || !Array.isArray(response.errors)) {
                return self.props.onNotify(this.responseText, true);
              }
              self.props.onNotify({ ...response, url: catalogUrl }, true);
            } else {
              self.props.onNotify(this.responseText);
            }
          });
          oReq.addEventListener('error', function () {
            self.props.onNotify(this.getErrorMessage(), true);
          });
          repo = repositories;
          oReq.addEventListener('loadend', function () {
            self.update({
              repositories,
              nRepositories: repositories.length,
              nImages,
              loadend: true,
            });
          });
          oReq.open('GET', catalogUrl);
          oReq.send();
        }).catch(error => {
            console.error("Error:", error);
        });
      },
    };
    export { cache };
    export { repoName }; 
  </script>
  <style>
    catalog {
      display: block;
      margin: auto;
    }
    catalog > material-card {
      width: 100%;
    }
  </style>
</catalog>
