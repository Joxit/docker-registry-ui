<!--
Copyright (C) 2016-2023 Jones Magloire @Joxit

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<tag-history>
  <material-card>
    <div class="material-card-title-action">
      <material-button
        text-color="var(--neutral-text)"
        color="inherit"
        waves-color="var(--hover-background)"
        waves-center="true"
        rounded="true"
        href="{ toTaglist() }"
        icon
      >
        <i class="material-icons">arrow_back</i>
      </material-button>
      <h2>History of { props.image }:{ props.tag } <i class="material-icons">history</i></h2>
      <material-button
        text-color="var(--accent-text)"
        color="inherit"
        waves-color="var(--hover-background)"
        waves-center="true"
        rounded="true"
        outlined
        onClick="{ showDockerfile }"
      >
        Dockerfile
      </material-button>
    </div>
  </material-card>
  <div if="{ !state.loadend }" class="spinner-wrapper">
    <material-spinner></material-spinner>
  </div>
  <dockerfile
    opened="{ state.showDockerfile }"
    on-close="{ onDockerfileClose }"
    elements="{ state.elements }"
    labelelements = "{ state.labelelements }"
    reportelements = "{ state.reportelements }"
    envelements = "{ state.envelements }"
  ></dockerfile>

  <material-tabs
    if="{ state.archs && state.loadend }"
    color="var(--background)"
    text-color="var(--primary-text)"
    text-selected-color="var(--accent-text)"
    line-color="var(--background)"
    line-selected-color="var(--accent-text)"
    useLine="{ true }"
    tabs="{ state.archs }"
    onTabChanged="{ onTabChanged }"
  ></material-tabs>

  <material-card each="{ element in state.elements }">
    <tag-history-element
      each="{ entry in element }"
      if="{ entry.value && entry.key!='Labels' && entry.key!='Env' && entry.value.length > 0}"
      entry="{ entry }"
    ></tag-history-element>
  </material-card>
  
  <material-card>
    <h2>&nbsp;&nbsp;<i class="material-icons">notes</i>&nbsp; Vulnerability Report </h2>
    <table id="dataTable">
      <thead>
          <tr>
              <th></th>
              <th>Package</th>
              <th>Vulnerabilities</th>
          </tr>
      </thead>
      <tbody>
          <!-- Data rows will be inserted here -->
      </tbody>
    </table>
  </material-card>

  <material-card each="{element in state.envelements}">
    <h2>&nbsp;&nbsp;<i class="material-icons">notes</i>&nbsp; ENV </h2>
    <image-label
      each="{ entry in element }"
      if="{ entry.value && entry.value.length > 0}"
      entry="{ entry }"
    ></image-label>
  </material-card>

  <material-card each="{element in state.labelelements}">
   <h2>&nbsp;&nbsp;<i class="material-icons">label</i>&nbsp; Labels </h2> 
   <image-label
    each="{ entry in element }"
    if="{ entry.value && entry.value.length > 0}"
    entry="{ entry }"
   ></image-label>
  </material-card>

  <script>
    import { DockerImage } from '../../scripts/docker-image';
    import { bytesToSize } from '../../scripts/utils';
    import Dockerfile from '../dialogs/dockerfile.riot';
    import router from '../../scripts/router';
    import TagHistoryElement from './tag-history-element.riot';
    import ImageLabel from './image-label.riot';
    const sevMap = {};
      sevMap["UNSPECIFIED"] = 0;
      sevMap["LOW"] = 1;
      sevMap["MEDIUM"] = 2;
      sevMap["HIGH"] = 3;
      sevMap["CRITICAL"] = 4;
      
    export default {
      components: {
        TagHistoryElement,
        Dockerfile,
        ImageLabel,
      },
      onBeforeMount(props, state) {
        state.elements = [];
        state.labelelements = [];
        state.reportelements = [];
        state.envelements = [];
        state.image = new DockerImage(props.image, props.tag, {
          list: true,
          registryUrl: props.registryUrl,
          onNotify: props.onNotify,
          onAuthentication: props.onAuthentication,
          useControlCacheHeader: props.useControlCacheHeader,
          isRegistrySecured: props.isRegistrySecured,
        });
        state.image.fillInfo();
      },
      onMounted(props, state) {
        state.image.on('blobs', this.processBlobs);
        state.image.on('list', this.multiArchList);
      },
      onTabChanged(arch, idx) {
        const state = this.state;
        const { registryUrl, onNotify, useControlCacheHeader } = this.props;
        state.elements = [];
        state.labelelements = [];
        state.reportelements = [];
        state.envelements = [];
        state.image.variants[idx] =
          state.image.variants[idx] ||
          new DockerImage(this.props.image, arch.digest, {
            list: false,
            registryUrl,
            onNotify,
            useControlCacheHeader,
          });
        if (state.image.variants[idx].blobs) {
          return this.processBlobs(state.image.variants[idx].blobs);
        }
        
        state.image.variants[idx].fillInfo();;
        state.image.variants[idx].on('blobs', this.processBlobs);
      },
      async fetchReport(family, image, tag) {
        const queryParams = new URLSearchParams({ family, image, tag }).toString();
        const backend_url = `https://ep-pokeball.netskope.io/api/report?${queryParams}`;
        console.log(backend_url);
        try {
          const response = await fetch(backend_url);
          const data = await response.json();
          return data;
        } catch (error) {
          console.error('Error fetching data:', error);
          return [];
        }
      },
      async processBlobs(blobs) {
        let reportelements = [];
        const state = this.state;
        const { historyCustomLabels } = this.props;
        const labels = this.state.image.blobs.config.Labels;
        const temp = Object.entries(labels)
        const labelelements = temp.map(obj=>{
            return {key:obj[0],value:obj[1]}
        })
        const env = this.state.image.blobs.config.Env;
        const tmp = Object.values(env)
        const envelements = tmp.map(obj=>{
            return {key:obj.split("=")[0],value:obj.split("=")[1]}
        })
        function exec(elt) {
          const guiElements = [];
          for (var attribute in elt) {
            if (elt.hasOwnProperty(attribute) && attribute != 'empty_layer') {
              const value = elt[attribute];
              const guiElement = modifySpecificAttributeTypes(attribute, value);
              guiElements.push(guiElement);
            }
          }
          return guiElements.sort(eltSort);
        }
        // Function to populate the table with vulnerability report data
        function populateTable(reportData) {
          const data = reportData.Results[0]["Vulnerabilities"];
          const pkgDict = {};
          const cveDict = {};
          data.forEach(item => {
            if (item.PkgName in pkgDict) {
              pkgDict[item.PkgName].push(item.VulnerabilityID);
            } else {
              pkgDict[item.PkgName] = [item.VulnerabilityID];
            }
            cveDict[item.VulnerabilityID] = item.Severity;
          });
          const tbody = document.querySelector('#dataTable tbody');
          for (const [pkg, vulnerabilities] of Object.entries(pkgDict)) {
            let sevArray = [0, 0, 0, 0, 0];
            for (let vul of vulnerabilities) {
              sevArray[Number(sevMap[cveDict[vul]])] += 1;
            }
            console.log("sevArray : ", sevArray);
            // Create rectangles container
            const rectContainer = document.createElement('div');
            rectContainer.classList.add('rect-container');
            sevArray.forEach(val => {
                const rect = document.createElement('div');
                rect.classList.add('rectangle');
                rect.textContent = val;
                rectContainer.appendChild(rect);
            });
            const mainRow = document.createElement('tr');
            mainRow.innerHTML = `
                <td class="expand-icon" >+</td>
                <td>${pkg}</td>
                <td style="text-align: center;"></td> <!-- Empty cell for rectangles -->
            `;
            mainRow.querySelector('td:nth-child(3)').appendChild(rectContainer);
            tbody.appendChild(mainRow);
            const expandableRows = [];
            for (let idx = 0; idx < vulnerabilities.length; idx++) { // Adjust the number of rows as needed
              const expandableRow = document.createElement('tr');
              expandableRow.classList.add('expandable-row');
              expandableRow.innerHTML = `
                  <td></td> <!-- Empty cell for alignment -->
                  <td>${vulnerabilities[idx]}</td>
                  <td>${cveDict[vulnerabilities[idx]]}</td>
              `;
              tbody.appendChild(expandableRow);
              expandableRows.push(expandableRow);
            }
            // Add click event listener to the "+" button
            mainRow.querySelector('.expand-icon').addEventListener('click', function () {
                const isExpanded = this.textContent === '-';
                expandableRows.forEach(row => {
                    row.style.display = isExpanded ? 'none' : 'table-row';
                });
                this.textContent = isExpanded ? '+' : '-'; // Toggle "+" to "-" to indicate expansion state
            });
          }
        }
        const elements = new Array(1);
        elements[0] = exec(getConfig(blobs, { historyCustomLabels }));
        const reportData = await this.fetchReport(state.image.name.split("/")[0], state.image.name.split("/")[1], state.image.tag);
        console.log("reportData", reportData);
        if ('error' in reportData) {
          console.log("Error in downloading report. Please check existence of the report in artifactory");
        } else if (reportData.Results[0].hasOwnProperty("Vulnerabilities")) {
          populateTable(reportData);
        }
        this.update({
          elements,
          loadend: true,
        });
        this.state.labelelements.push(labelelements);
        this.state.envelements.push(envelements);
        this.update();
      },

      multiArchList(manifests) {
        manifests = manifests.manifests || manifests;
        const archs = manifests.map(function (manifest) {
          return {
            title:
              manifest.platform.os +
              '/' +
              manifest.platform.architecture +
              (manifest.platform.variant ? manifest.platform.variant : ''),
            digest: manifest.digest,
          };
        });
        this.update({
          archs,
        });
      },
      toTaglist() {
        return router.taglist(this.props.image);
      },
      showDockerfile() {
        this.update({ showDockerfile: true });
      },
      onDockerfileClose() {
        this.update({ showDockerfile: false });
      },
    };
    const eltIdx = function (e) {
      switch (e) {
        case 'created':
          return 1;
        case 'created_by':
          return 2;
        case 'size':
          return 3;
        case 'os':
          return 4;
        case 'architecture':
          return 5;
        case 'id':
          return 6;
        case 'linux':
          return 7;
        case 'docker_version':
          return 8;
        default:
          return 10;
      }
    };

    const eltSort = function (e1, e2) {
      return eltIdx(e1.key) - eltIdx(e2.key);
    };

    const parseCreatedBy = (value) => {
      if (value.startsWith('COPY')) {
        return {
          value: 'COPY',
          content: value.replace(/^COPY /, ''),
        };
      }
      let cmd = value.match(/\/bin\/sh *-c *#\(nop\) *([A-Z]+) (.*)/);
      return {
        value: (cmd && cmd[1]) || 'RUN',
        content: (cmd && cmd[2]) || value.replace(/^\/bin\/sh *-c *(#\(nop\))?/, ''),
      };
    };

    const modifySpecificAttributeTypes = function (key, value) {
      switch (key) {
        case 'created':
          return { key, value: new Date(value).toLocaleString() };
        case 'created_by':
          const cmd = value.match(/\/bin\/sh *-c *#\(nop\) *([A-Z]+) (.*)/);
          return {
            key,
            ...parseCreatedBy(value),
          };
        case 'size':
          return { key, value: bytesToSize(value) };
        case 'Entrypoint':
        case 'Cmd':
          return { key, value: (value || []).join(' ') };
        case 'Labels':
          return {
            key,
            value: Object.keys(value || {}).map(function (elt) {
              return value[elt] ? elt + '=' + value[elt] : '';
            }),
          };
        case 'Volumes':
        case 'ExposedPorts':
          return { key, value: Object.keys(value) };
      }
      return { key, value: value || '' };
    };
    const getConfig = function (blobs, { historyCustomLabels }) {
      const res = [
        'architecture',
        'User',
        //'created',
        'docker_version',
        'os',
        'Cmd',
        'Entrypoint',
        'Labels',
        'User',
        'Volumes',
        'WorkingDir',
        'author',
        'id',
        'ExposedPorts',
      ].reduce(function (acc, e) {
        const value = blobs[e] || blobs.config[e];
        if (value && e === 'architecture' && blobs.variant) {
          acc[e] = value + blobs.variant;
        } else if (value) {
          acc[e] = value;
        }
        return acc;
      }, {});

      if (!res.author && res.Labels && res.Labels.maintainer) {
        res.author = blobs.config.Labels.maintainer;
        delete res.Labels.maintainer;
      }

      if (res.Labels) {
        historyCustomLabels
          .filter((label) => res.Labels[label])
          .forEach((label) => {
            res[`custom-label-${label}`] = res.Labels[label];
            delete res.Labels[label];
          });
      }

      return res;
    };
  </script>
  <style>
    h2 {
      flex-grow: 1;
      display: flex;
      flex-direction: row;
      align-items: center;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background-color: #fff;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: center; /* Center content horizontally */
      align-items: center;
    }
    th {
      background-color: #f4f4f4;
      text-align: center; /* Center content horizontally */
      align-items: center;
    }
    .expand-icon {
      cursor: pointer;
      text-align: center;
      padding: 0 5px;
    }
    #dataTable {
      width: 100%; /* Ensure table takes full width of container */
      table-layout: fixed; /* Ensures consistent column width */
      text-align: center; /* Center content horizontally */
    }
    #dataTable td {
      padding: 8px; /* Adjust padding as needed */
      text-align: center; /* Center content horizontally */
    }
    #dataTable th {
      padding: 8px; /* Adjust padding as needed */
      text-align: center; /* Center-aligns text in table headers */
    }
    .expandable-row {
      display: none; /* Hide expandable rows initially */
    }
    .expandable-row td:first-child {
      padding-left: 20px; /* Indent expandable rows for visual hierarchy */
    }
    .rect-container {
      display: flex; /* Align rectangles in a row */
      gap: 4px; /* Space between rectangles */
      justify-content: center; /* Horizontally centers the rectangles */
      align-items: center; /* Vertically centers the rectangles */
    }
    .rectangle {
      width: 20px; /* Width of each rectangle */
      height: 20px; /* Height of each rectangle */
      background-color: #FFFFFF;
      color: black; /* Text color */
      text-align: center; /* Center text */
      line-height: 20px; /* Center text vertically */
      border-radius: 3px; /* Rounded corners */
      border: 1px solid #333; /* Border color */
      box-shadow: 1px 1px 3px rgba(0,0,0,0.2); /* Shadow for 3D effect */
    }
    /* Set width for the first column */
    #dataTable th:nth-child(1),
    #dataTable td:nth-child(1) {
      width: 10%;
    }
  </style>
</tag-history>
